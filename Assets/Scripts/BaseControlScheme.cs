//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/BaseControlScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseControlScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseControlScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseControlScheme"",
    ""maps"": [
        {
            ""name"": ""InBattle"",
            ""id"": ""f828b5d2-a552-4f68-ad1c-bf95c14e6319"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2b33e81e-7bc0-40bc-a7d9-1fa4ce46fb20"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""febc0920-430f-4a8a-85e7-b4e372ce6558"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardFall"",
                    ""type"": ""Button"",
                    ""id"": ""a0560d51-3cb3-4dea-a560-a5efb8ac4a9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""5fee7b00-1019-4d36-9d89-b9536ca61caf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f27deaf1-6da9-4d04-840b-a880ce640255"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bdcb4a29-6477-423b-a9e5-05e3aae80f86"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseHeal"",
                    ""type"": ""Button"",
                    ""id"": ""f966d0bc-8cfe-46d1-b51e-4aef977bf102"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""26f4c4ba-d9a8-4396-9d92-536c9d80c182"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d50fd52b-5dc2-4602-93d3-25fdcfe0ad91"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fab90dfc-62be-4d41-8fbd-8ff3d667c205"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c76d1c3a-6b6e-4a14-b249-dc71aeaecb93"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e7c1d7fc-cbec-4588-aad5-1dc6107f2994"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c618d6c5-b7fd-4d09-9848-02515e1d68c4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c69c5cc-b21a-4231-a73a-b5a2066ccebb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardFall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf51afe7-d357-431c-b50d-973b1483c664"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""653557f0-26e5-4688-af60-2cd8ac35e8c8"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efb02e2b-a429-4779-802e-7ac04ef3d585"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37006f91-c8ff-4c41-8b28-163565ac3a68"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseHeal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // InBattle
        m_InBattle = asset.FindActionMap("InBattle", throwIfNotFound: true);
        m_InBattle_Move = m_InBattle.FindAction("Move", throwIfNotFound: true);
        m_InBattle_Jump = m_InBattle.FindAction("Jump", throwIfNotFound: true);
        m_InBattle_HardFall = m_InBattle.FindAction("HardFall", throwIfNotFound: true);
        m_InBattle_LightAttack = m_InBattle.FindAction("LightAttack", throwIfNotFound: true);
        m_InBattle_HeavyAttack = m_InBattle.FindAction("HeavyAttack", throwIfNotFound: true);
        m_InBattle_Sprint = m_InBattle.FindAction("Sprint", throwIfNotFound: true);
        m_InBattle_UseHeal = m_InBattle.FindAction("UseHeal", throwIfNotFound: true);
    }

    ~@BaseControlScheme()
    {
        UnityEngine.Debug.Assert(!m_InBattle.enabled, "This will cause a leak and performance issues, BaseControlScheme.InBattle.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InBattle
    private readonly InputActionMap m_InBattle;
    private List<IInBattleActions> m_InBattleActionsCallbackInterfaces = new List<IInBattleActions>();
    private readonly InputAction m_InBattle_Move;
    private readonly InputAction m_InBattle_Jump;
    private readonly InputAction m_InBattle_HardFall;
    private readonly InputAction m_InBattle_LightAttack;
    private readonly InputAction m_InBattle_HeavyAttack;
    private readonly InputAction m_InBattle_Sprint;
    private readonly InputAction m_InBattle_UseHeal;
    public struct InBattleActions
    {
        private @BaseControlScheme m_Wrapper;
        public InBattleActions(@BaseControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InBattle_Move;
        public InputAction @Jump => m_Wrapper.m_InBattle_Jump;
        public InputAction @HardFall => m_Wrapper.m_InBattle_HardFall;
        public InputAction @LightAttack => m_Wrapper.m_InBattle_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_InBattle_HeavyAttack;
        public InputAction @Sprint => m_Wrapper.m_InBattle_Sprint;
        public InputAction @UseHeal => m_Wrapper.m_InBattle_UseHeal;
        public InputActionMap Get() { return m_Wrapper.m_InBattle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InBattleActions set) { return set.Get(); }
        public void AddCallbacks(IInBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_InBattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InBattleActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @HardFall.started += instance.OnHardFall;
            @HardFall.performed += instance.OnHardFall;
            @HardFall.canceled += instance.OnHardFall;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @UseHeal.started += instance.OnUseHeal;
            @UseHeal.performed += instance.OnUseHeal;
            @UseHeal.canceled += instance.OnUseHeal;
        }

        private void UnregisterCallbacks(IInBattleActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @HardFall.started -= instance.OnHardFall;
            @HardFall.performed -= instance.OnHardFall;
            @HardFall.canceled -= instance.OnHardFall;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @UseHeal.started -= instance.OnUseHeal;
            @UseHeal.performed -= instance.OnUseHeal;
            @UseHeal.canceled -= instance.OnUseHeal;
        }

        public void RemoveCallbacks(IInBattleActions instance)
        {
            if (m_Wrapper.m_InBattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_InBattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InBattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InBattleActions @InBattle => new InBattleActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IInBattleActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHardFall(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnUseHeal(InputAction.CallbackContext context);
    }
}
